from PIL import Image
import hashlib
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import serialization

# Funções auxiliares
def embed_text(image_path, output_path, text):
    img = Image.open(image_path)
    binary_text = ''.join(format(ord(char), '08b') for char in text)
    pixels = img.load()
    binary_index = 0

    for y in range(img.size[1]):
        for x in range(img.size[0]):
            if binary_index < len(binary_text):
                r, g, b = pixels[x, y]
                r = (r & ~1) | int(binary_text[binary_index])
                pixels[x, y] = (r, g, b)
                binary_index += 1
            else:
                break

    img.save(output_path)
    print(f"Texto embutido e salvo em: {output_path}")

def extract_text(image_path):
    img = Image.open(image_path)
    pixels = img.load()
    binary_text = ""
    
    for y in range(img.size[1]):
        for x in range(img.size[0]):
            r, _, _ = pixels[x, y]
            binary_text += str(r & 1)

    text = "".join(chr(int(binary_text[i:i+8], 2)) for i in range(0, len(binary_text), 8))
    return text.strip("\x00")

def generate_hash(image_path):
    with open(image_path, "rb") as f:
        bytes_data = f.read()
    return hashlib.sha256(bytes_data).hexdigest()

def encrypt_message(public_key, message):
    return public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )

def decrypt_message(private_key, encrypted_message):
    return private_key.decrypt(
        encrypted_message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    ).decode()

# Geração de chaves RSA
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)
public_key = private_key.public_key()

# Loop do menu
while True:
    print("\nMenu de opções:")
    print("(1) Embutir texto em uma imagem")
    print("(2) Recuperar texto de uma imagem")
    print("(3) Gerar hash das imagens")
    print("(4) Encriptar mensagem")
    print("(5) Decriptar mensagem")
    print("(S ou s) Sair")
    choice = input("Escolha uma opção: ").strip().lower()

    if choice == "s":
        print("Encerrando aplicação.")
        break
    elif choice == "1":
        image_path = input("Caminho da imagem original: ")
        output_path = input("Caminho para salvar a imagem alterada: ")
        text = input("Texto a ser embutido: ")
        embed_text(image_path, output_path, text)
    elif choice == "2":
        image_path = input("Caminho da imagem alterada: ")
        text = extract_text(image_path)
        print(f"Texto recuperado: {text}")
    elif choice == "3":
        image1 = input("Caminho da imagem original: ")
        image2 = input("Caminho da imagem alterada: ")
        hash1 = generate_hash(image1)
        hash2 = generate_hash(image2)
        print(f"Hash da imagem original: {hash1}")
        print(f"Hash da imagem alterada: {hash2}")
        print("As imagens são diferentes!" if hash1 != hash2 else "As imagens são iguais!")
    elif choice == "4":
        message = input("Mensagem a ser encriptada: ")
        encrypted_message = encrypt_message(public_key, message)
        print(f"Mensagem encriptada: {encrypted_message}")
    elif choice == "5":
        encrypted_message = input("Insira a mensagem encriptada (em bytes): ")
        try:
            encrypted_message = eval(encrypted_message)  # Converter string para bytes
            decrypted_message = decrypt_message(private_key, encrypted_message)
            print(f"Mensagem decriptada: {decrypted_message}")
        except Exception as e:
            print(f"Erro na decriptação: {e}")
    else:
        print("Opção inválida, tente novamente.")
